<<<<<<< HEAD
// Generated by CoffeeScript 1.8.0-reflective.24
(function() {
  var courses, dish, food, foods, i, _i, _j, _k, _len, _len1, _len2, _ref;
||||||| merged common ancestors
// Generated by CoffeeScript 1.8.0
var courses, dish, food, foods, i, _i, _j, _k, _len, _len1, _len2, _ref;
=======
// Generated by CoffeeScript 1.9.3
var courses, dish, food, foods, i, j, k, l, len, len1, len2, ref;
>>>>>>> 1.9.3

<<<<<<< HEAD
  _ref = ['toast', 'cheese', 'wine'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    food = _ref[_i];
    eat(food);
  }
||||||| merged common ancestors
_ref = ['toast', 'cheese', 'wine'];
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  food = _ref[_i];
  eat(food);
}
=======
ref = ['toast', 'cheese', 'wine'];
for (j = 0, len = ref.length; j < len; j++) {
  food = ref[j];
  eat(food);
}
>>>>>>> 1.9.3

  courses = ['greens', 'caviar', 'truffles', 'roast', 'cake'];

<<<<<<< HEAD
  for (i = _j = 0, _len1 = courses.length; _j < _len1; i = ++_j) {
    dish = courses[i];
    menu(i + 1, dish);
  }
||||||| merged common ancestors
for (i = _j = 0, _len1 = courses.length; _j < _len1; i = ++_j) {
  dish = courses[i];
  menu(i + 1, dish);
}
=======
for (i = k = 0, len1 = courses.length; k < len1; i = ++k) {
  dish = courses[i];
  menu(i + 1, dish);
}
>>>>>>> 1.9.3

  foods = ['broccoli', 'spinach', 'chocolate'];

<<<<<<< HEAD
  for (_k = 0, _len2 = foods.length; _k < _len2; _k++) {
    food = foods[_k];
    if (food !== 'chocolate') {
      eat(food);
    }
||||||| merged common ancestors
for (_k = 0, _len2 = foods.length; _k < _len2; _k++) {
  food = foods[_k];
  if (food !== 'chocolate') {
    eat(food);
=======
for (l = 0, len2 = foods.length; l < len2; l++) {
  food = foods[l];
  if (food !== 'chocolate') {
    eat(food);
>>>>>>> 1.9.3
  }

}).call(this);
